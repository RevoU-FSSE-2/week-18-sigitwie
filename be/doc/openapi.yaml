openapi: 3.0.0
info:
  version: 1.0.0
  title: DoBrief API Documentation
  description: API Documentation for DoBrief
servers:
  - url: http://localhost:3003/v1/api
    description: Development Server
  - url: https://w18.eswe.dev/v1/api
    description: Production Server
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionId
      description: 'Session ID stored in a cookie, used to derive managerId for projects'
  schemas:
    UserAttributes:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Project:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        managerId:
          type: string
          description: 'UUID of the manager, derived from session cookie'
    Task:
      type: object
      properties:
        title:
          type: string
          description: The title of the task.
        description:
          type: string
          description: A description detailing the task.
        status:
          type: string
          enum: [New, 'In Progress', Completed]
          description: The current status of the task.
        priority:
          type: string
          enum: [Low, Medium, High]
          description: The priority level of the task.
        dueDate:
          type: string
          description: The date by which the task should be completed.
          format: date
        assignee:
          type: string
          description: The user assigned to the task.
        projectId:
          type: string
          description: The ID of the project this task belongs to.

paths:

  # Users category
  /users/register:
    post:
      summary: Register a new user
      tags:
       - Users
      security:
       - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAttributes'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation error
        '500':
          description: Registration failed

  /users/login:
    post:
      summary: User login
      tags:
       - Users
      security:
       - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid email or password
        '500':
          description: Login failed

  /users/logout:
    post:
      summary: User logout
      tags:
       - Users
      security:
       - cookieAuth: []
      responses:
        '200':
          description: Logout successful
        '500':
          description: Logout failed

  # Projects category
  /projects/{projectId}:
    get:
      summary: Get project by ID
      tags:
       - Projects
      security:
       - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: ID of the project
          schema:
            type: string
      responses:
        '200':
          description: Project fetched successfully
        '404':
          description: Project not found
        '500':
          description: Fetching project failed

  /projects/update/{projectId}:
    put:
      summary: Update project by ID
      tags:
       - Projects
      security:
       - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: ID of the project to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated successfully
        '400':
          description: Validation error
        '404':
          description: Project not found
        '500':
          description: Updating project failed

  /projects/delete/{projectId}:
    delete:
      summary: Delete project by ID
      tags:
       - Projects
      security:
       - cookieAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: ID of the project to delete
          schema:
            type: string
      responses:
        '200':
          description: Project deleted successfully
        '404':
          description: Project not found
        '500':
          description: Deleting project failed

  /projects/all-projects:
    get:
      summary: Get all projects
      tags:
       - Projects
      security:
       - cookieAuth: []
      responses:
        '200':
          description: Projects fetched successfully
        '500':
          description: Fetching projects failed
  # Task category
  /tasks/add:
    post:
      summary: Add a new task
      tags:
       - Task
      security:
       - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task added successfully
        '400':
          description: Validation error
        '500':
          description: Adding task failed

  /tasks/{taskId}:
    get:
      summary: Get task by ID
      tags:
       - Task
      security:
       - cookieAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task
          schema:
            type: string
      responses:
        '200':
          description: Task fetched successfully
        '404':
          description: Task not found
        '500':
          description: Fetching task failed

  /tasks/all-tasks:
    get:
      summary: Get all tasks
      tags:
       - Task
      security:
       - cookieAuth: []
      responses:
        '200':
          description: Tasks fetched successfully
        '500':
          description: Fetching tasks failed

  /tasks/update/{taskId}:
    put:
      summary: Update task by ID
      tags:
       - Task
      security:
       - cookieAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
        '400':
          description: Validation error
        '404':
          description: Task not found
        '500':
          description: Updating task failed

  /tasks/delete/{taskId}:
    delete:
      summary: Delete task by ID
      tags:
       - Task
      security:
       - cookieAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task to delete
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
        '404':
          description: Task not found
        '500':
          description: Deleting task failed
